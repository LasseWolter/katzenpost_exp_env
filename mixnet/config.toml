# Can be used to connect to katzenpost's mixnet through TOR which we are not interested in
[UpstreamProxy]
Type = "none"

# Define logging settings
[Logging]
Disable = false
Level = "DEBUG"
File = "/home/lasse/go/src/github.com/katzenpost/mixnet/log/catshadow1.log"

# Address and public key of the Authority (PKI)
[NonvotingAuthority]
Address = "127.0.0.1:2323" 
PublicKey = "vLWsMpdPGr1/uZlmAcHc3eDkDs5ObaaCrFB/6gF5Dzo="

# We don't need to add a public key for the provider since key distribution happens
# entirely through the Authroity (PKI)
[Account]
Provider = "provider"

[Registration]
Address = "127.0.0.1:8082"  # HTTP User Registration address of the provider 
[Registration.Options]
  Scheme = "http"
  # We can use Socks to connect to katzenpost's mixnet which we are not interested in for our experiments
  UseSocks = false 
  #SocksNetwork = "tcp"
  #SocksAddress = "127.0.0.1:9050"

[Debug]
  # We don't disable decoy loops since all messages we sent are drop decoy messages.
  # We can use drop decoy messages because we don't care about receiving messages. 
  DisableDecoyLoops = false 
  CaseSensitiveUserIdentifiers = false
  PollingInterval = 3000

# This section is not curcial for the experiment but neccessary for catshadow to function
[Panda]
  Receiver = "+panda"
  Provider = "serviceprovider"
  BlobSize = 1000 

[Experiment]
  # Duration of the experiment [in minutes]
  Duration=5

  # Inverse of the mean of the exponential distribution from which the sending delay between two messages is sampled
  LambdaP=0.025

  # Max sending delay between two messages
  LambdaPMaxDelay=200000

  # Inverse of the exponential distribution from which hop delays are sampled
  Mu = 0.00025

  # Max hop delay
  MuMaxDelay = 20000

  # Interval at which the server is polled for its message queue lengths [in milliseconds]
  QueuePollInterval = 5

  # Directory in which the queue length related logs are stored
  QueueLogDir = "one"

# You can define one or many clients by adding sections as shown below 
# For each of them you can define one or more Client.Updates which update the LambdaP(MaxDelay) values 
# after the given time has passed (since experiment start)
[[Client]]
  Name = "cli1"
# [[Client.Update]]
#    Time = 1 
#    LambdaP = 0.005
#    LambdaPMaxDelay = 30000
# [[Client.Update]]
#    Time = 1 
#    LambdaP = 0.005
#    LambdaPMaxDelay = 30000
 
#[[Client]]
#  Name = "cli2"
# [[Client.Update]]
#    Time = 1 
#    LambdaP = 0.005
#    LambdaPMaxDelay = 30000
 

